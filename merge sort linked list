#include <stdio.h>
#include <stdlib.h>

// Define a structure for a node in the linked list
struct Node {
    int value;
    struct Node* next;
};

// Function to merge two sorted linked lists into a single sorted list
struct Node* merge(struct Node* left, struct Node* right) {
    if (left == NULL) {
        return right;
    }
    if (right == NULL) {
        return left;
    }

    struct Node* result = NULL;
    struct Node* current = NULL;

    while (left != NULL && right != NULL) {
        if (left->value <= right->value) {
            if (result == NULL) {
                result = left;
                current = left;
            } else {
                current->next = left;
                current = left;
            }
            left = left->next;
        } else {
            if (result == NULL) {
                result = right;
                current = right;
            } else {
                current->next = right;
                current = right;
            }
            right = right->next;
        }
    }

    // Append any remaining nodes from left or right
    if (left != NULL) {
        current->next = left;
    }
    if (right != NULL) {
        current->next = right;
    }

    return result;
}

// Function to perform MergeSort on a linked list
struct Node* mergeSort(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    // Split the linked list into two halves
    struct Node* slow = head;
    struct Node* fast = head->next;

    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    struct Node* left = head;
    struct Node* right = slow->next;
    slow->next = NULL;

    // Recursively sort the two halves
    left = mergeSort(left);
    right = mergeSort(right);

    // Merge the sorted halves
    return merge(left, right);
}

// Function to insert a new node at the end of the linked list
struct Node* insert(struct Node* head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->value = data;
    newNode->next = NULL;

    if (head == NULL) {
        return newNode;
    }

    struct Node* current = head;
    while (current->next != NULL) {
        current = current->next;
    }

    current->next = newNode;
    return head;
}

// Function to print the linked list
void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d ", current->value);
        current = current->next;
    }
    printf("\n");
}

int main() {
    struct Node* head = NULL;
    int n, data;

    printf("Enter the number of elements: ");
    scanf("%d", &n);

    printf("Enter %d elements: ", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &data);
        head = insert(head, data);
    }

    printf("Original list: ");
    printList(head);

    head = mergeSort(head);

    printf("Sorted list: ");
    printList(head);

    return 0;
}
